// <auto-generated />
using System;
using AlgoHub.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlgoHub.DAL.Migrations;

[DbContext(typeof(AlgoHubContext))]
[Migration("20221113124519_Initial")]
partial class Initial
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "7.0.0")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("AlgoHub.DAL.Entities.Lesson", b =>
            {
                b.Property<int?>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                b.Property<int?>("AuthorId")
                    .HasColumnType("int");

                b.Property<string>("Content")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("nvarchar(max)")
                    .HasDefaultValue("[{type:\"paragraph\",\"value\":\"Nothing in there yet!\"}]");

                b.Property<DateTime?>("CreationDate")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<int?>("Downvotes")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasDefaultValue(0);

                b.Property<string>("ImageUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("UpdateDate")
                    .IsRequired()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<int?>("Upvotes")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasDefaultValue(0);

                b.Property<int?>("Views")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasDefaultValue(0);

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.ToTable("Lessons");

                b.HasData(
                    new
                    {
                        Id = 1,
                        AuthorId = 1,
                        Content = "[\r\n    {\r\n        \"type\":\"emphasis\",\r\n        \"value\":\"Алгоритм Дейкстри дозволяє знайти найкоротший шлях між будь-якими двома вузлами графа.\"\r\n    },{\r\n        \"type\":\"paragraph\",\r\n        \"value\":\"Він відрізняється від алгоритму мінімального остовного дерева тим, що знайдений найкоротший шлях не обов'язково міститиме усі вузли графу.\"\r\n    },{\r\n        \"type\":\"bar\"\r\n    },{\r\n        \"type\":\"subtitle\",\r\n        \"value\":\"Принцип роботи\"\r\n    },{\r\n        \"type\":\"paragraph\",\r\n        \"value\":\"Алгоритм Дейкстри працює на основі того, що будь-який підшлях B -> D найкоротшого шляху A -> D між вершинами A і D також є найкоротшим шляхом між вершинами B і D.\"\r\n    },{\r\n        \"type\":\"image\",\r\n        \"value\":\"lesson1/1\",\r\n        \"caption\":\"Кожен підшлях є найкоротшим шляхом\"\r\n    }\r\n]",
                        Downvotes = 76,
                        Title = "Алгоритм Дейкстри",
                        Upvotes = 1425,
                        Views = 14662
                    },
                    new
                    {
                        Id = 2,
                        AuthorId = 2,
                        Title = "Empty lesson"
                    });
            });

        modelBuilder.Entity("AlgoHub.DAL.Entities.Tag", b =>
            {
                b.Property<int?>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                b.Property<string>("TagName")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("TagName")
                    .IsUnique();

                b.ToTable("Tags");

                b.HasData(
                    new
                    {
                        Id = 1,
                        TagName = "sort"
                    },
                    new
                    {
                        Id = 2,
                        TagName = "pathfinding"
                    },
                    new
                    {
                        Id = 3,
                        TagName = "tutorial"
                    },
                    new
                    {
                        Id = 4,
                        TagName = "search"
                    },
                    new
                    {
                        Id = 5,
                        TagName = "2d-arrays"
                    },
                    new
                    {
                        Id = 6,
                        TagName = "strings"
                    },
                    new
                    {
                        Id = 7,
                        TagName = "lists"
                    },
                    new
                    {
                        Id = 8,
                        TagName = "c++"
                    },
                    new
                    {
                        Id = 9,
                        TagName = "c#"
                    },
                    new
                    {
                        Id = 10,
                        TagName = "javascript"
                    },
                    new
                    {
                        Id = 11,
                        TagName = "java"
                    },
                    new
                    {
                        Id = 12,
                        TagName = "python"
                    },
                    new
                    {
                        Id = 13,
                        TagName = "tree"
                    },
                    new
                    {
                        Id = 14,
                        TagName = "binarytree"
                    },
                    new
                    {
                        Id = 15,
                        TagName = "binary"
                    },
                    new
                    {
                        Id = 16,
                        TagName = "classic"
                    },
                    new
                    {
                        Id = 17,
                        TagName = "optimization"
                    },
                    new
                    {
                        Id = 18,
                        TagName = "guide"
                    },
                    new
                    {
                        Id = 19,
                        TagName = "3d"
                    },
                    new
                    {
                        Id = 20,
                        TagName = "graph"
                    });
            });

        modelBuilder.Entity("AlgoHub.DAL.Entities.User", b =>
            {
                b.Property<int?>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                b.Property<DateTime?>("CreationDate")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("FullName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("IconUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PasswordSalt")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("Email")
                    .IsUnique();

                b.HasIndex("UserName")
                    .IsUnique();

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Email = "armandovargas@gmail.com",
                        FullName = "Armando Vargas",
                        PasswordHash = "waU/UkDFh8hpFKl2UHeiXbQuckTdFUVhJpQETDzkdaY=",
                        PasswordSalt = "hJeXeKrTm9qo+Au0ROx9crHGXbQ4yfVd915vp62Ee0s=",
                        UserName = "armandovargas"
                    },
                    new
                    {
                        Id = 2,
                        Email = "valentinosnyder@gmail.com",
                        FullName = "Valentino Snyder",
                        PasswordHash = "8sYiiQDpv5uV13JmQoNOIhPm1kb5ZypGb1xh3lgBDMM=",
                        PasswordSalt = "GCdM2928u5CjDM+a1AgrMJX2Lr/Sli+PYzj62S0Mnnk=",
                        UserName = "valentinosnyder"
                    },
                    new
                    {
                        Id = 3,
                        Email = "journeydixon@gmail.com",
                        FullName = "Journey Dixon",
                        PasswordHash = "/jLcYb6ItQoeEjsU+4N/EyXms4MVNtwMtqaRmK9QOgI=",
                        PasswordSalt = "xrgTfUWAoiHeFwcC/uag8vhiUroTRaJWLCnaE/oGOfQ=",
                        UserName = "journeydixon"
                    },
                    new
                    {
                        Id = 4,
                        Email = "victorwilkinson@gmail.com",
                        FullName = "Victor Wilkinson",
                        PasswordHash = "EOsa/Q3nXJj16O4UPZOMt+Ppygx3grSoT7CxEZEG1ww=",
                        PasswordSalt = "+DXodsiAr/+vtG1/EGPuO/6nV8LK1RZD35SF0n703ls=",
                        UserName = "victorwilkinson"
                    },
                    new
                    {
                        Id = 5,
                        Email = "braelynodom@gmail.com",
                        FullName = "Braelyn Odom",
                        PasswordHash = "Y5900ADiGFOOeZcH+AMoWupgR/zRiHMA4vOuT3v4Mtk=",
                        PasswordSalt = "XhSZ+kCs1fQPguLs4nDkySqVnU1G7LhOqiNcTRcqwqQ=",
                        UserName = "braelynodom"
                    },
                    new
                    {
                        Id = 6,
                        Email = "carissafaulkner@gmail.com",
                        FullName = "Carissa Faulkner",
                        PasswordHash = "N83GZVgtWntGfPYd/rDXgK5AtjsjDmg/c57YBLiQqvQ=",
                        PasswordSalt = "EKQuPBV135Upx4JEpt4cWSqaUWVxSa8X/FZolJSaa9U=",
                        UserName = "carissafaulkner"
                    },
                    new
                    {
                        Id = 7,
                        Email = "mikemcclure@gmail.com",
                        FullName = "Mike Mcclure",
                        PasswordHash = "qZGdear3uo7ykSeF3sChfiqYgrOi+doh9UK6wok/u18=",
                        PasswordSalt = "OeBRRX0bLKy3pa/69Nqgtl9Gs4dVPXGkbDrWMCWIKzQ=",
                        UserName = "mikemcclure"
                    },
                    new
                    {
                        Id = 8,
                        Email = "brookssawyer@gmail.com",
                        FullName = "Brooks Sawyer",
                        PasswordHash = "GyIoLhsXmBrYw4zS1x6i85gsQxknPBthBiyxEEku9RU=",
                        PasswordSalt = "IJUUwAs4oYjkQV0kx0yHGbrGE6bHHMTvzL21U0TxdOA=",
                        UserName = "brookssawyer"
                    },
                    new
                    {
                        Id = 9,
                        Email = "kylanhardy@gmail.com",
                        FullName = "Kylan Hardy",
                        PasswordHash = "44lqozQ4wYMvVowKpoojBHKZl7+LJLxTwRTcgfi8peQ=",
                        PasswordSalt = "BB/eMgsCf1ihzaEI3gV1IkSENgVeLS0Lsi7JbsIZ94E=",
                        UserName = "kylanhardy"
                    },
                    new
                    {
                        Id = 10,
                        Email = "nyasiaduarte@gmail.com",
                        FullName = "Nyasia Duarte",
                        PasswordHash = "ynxf6zi1WWKpt436IvLQOak5zXsAhKoqsYmPRUbq7TE=",
                        PasswordSalt = "MBbFNuowRYW7nx+RAthd4aCKePRrCyFnN0ZGf5gQLXY=",
                        UserName = "nyasiaduarte"
                    },
                    new
                    {
                        Id = 11,
                        Email = "justineramos@gmail.com",
                        FullName = "Justine Ramos",
                        PasswordHash = "mGIJjs4ZqWFSTpVQPv9rbF4xBD0Gh7Xtpn6fqvMvu7U=",
                        PasswordSalt = "Ezc0Pr2DKpd58NLK51hlG81FuPBKM2oWn3RSTtaoJtE=",
                        UserName = "justineramos"
                    },
                    new
                    {
                        Id = 12,
                        Email = "miyamorrow@gmail.com",
                        FullName = "Miya Morrow",
                        PasswordHash = "5EqaWFvsox77K0S58C18iIONB+8YuKb1YvvfnfTzsos=",
                        PasswordSalt = "6XrwbJ/GoqcWNgwFNYf7+ZtwuKozdFRZnFgekDD+h/A=",
                        UserName = "miyamorrow"
                    });
            });

        modelBuilder.Entity("LessonTag", b =>
            {
                b.Property<int>("LessonId")
                    .HasColumnType("int");

                b.Property<int>("TagId")
                    .HasColumnType("int");

                b.HasKey("LessonId", "TagId");

                b.HasIndex("TagId");

                b.ToTable("LessonTag");

                b.HasData(
                    new
                    {
                        LessonId = 1,
                        TagId = 2
                    },
                    new
                    {
                        LessonId = 1,
                        TagId = 3
                    },
                    new
                    {
                        LessonId = 1,
                        TagId = 4
                    },
                    new
                    {
                        LessonId = 1,
                        TagId = 5
                    },
                    new
                    {
                        LessonId = 1,
                        TagId = 20
                    });
            });

        modelBuilder.Entity("AlgoHub.DAL.Entities.Lesson", b =>
            {
                b.HasOne("AlgoHub.DAL.Entities.User", "Author")
                    .WithMany()
                    .HasForeignKey("AuthorId");

                b.Navigation("Author");
            });

        modelBuilder.Entity("LessonTag", b =>
            {
                b.HasOne("AlgoHub.DAL.Entities.Lesson", null)
                    .WithMany()
                    .HasForeignKey("LessonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AlgoHub.DAL.Entities.Tag", null)
                    .WithMany()
                    .HasForeignKey("TagId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
    }
}
